package net.yiim.yismcore;

import android.util.Log;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

/**
 * Instrumented test, which will execute on an Android device.
 *
 * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
 */
@RunWith(AndroidJUnit4.class)
public class RSASignerTest {
    private String pkcs1PrivKStr = "-----BEGIN RSA PRIVATE KEY-----\n" +
            "MIICXQIBAAKBgQC1d8wAeHL1FaSOi7DVCOGmvTHDcjpZHnqv8GbWB5g1S0LJnymN\n" +
            "xuLIhTWzszOxiAqGET4rw3sltai7lcAGaBB2PZpY0CU+P8ppmC+8uTlAI0TdPLhm\n" +
            "+WqGyyUu3VwwJR48/WhK/0bsUOyjwZi3CQe80TRfnG/EcgehH4GxLbqz5wIDAQAB\n" +
            "AoGBAKcf9lR0mcLXtN7HDguVC2Spl5wdplkPNgS1DbCN/AMRFihkGjwFcDUmYafn\n" +
            "IXOeC7sfRDe/57l6DTT9nIUJ8CW3iyTWaYJJel0VNO0RQikYUyIQtBhttaisiszp\n" +
            "aAQpAYZEavre570nKUCHbnnrmaC93PFbfwdKinQ5BdMmD+UZAkEA5gnNvrN2VCE7\n" +
            "uMKEuLNQ2xQT7E+cgjp3eOjuzZGD0VVXme4lnNSc1QIgOAcU9MuNzoWzXeUhDLPv\n" +
            "dZnNu/uBfQJBAMnytrkLCJgL+ggVvx/vKtV3p6AHXnEA3A3g4jgbVqimDBvdIIdS\n" +
            "u5gjByeP58YeTAyp6tD2awvGQqEn0Z0kCDMCQA+tB1pBfITLJvi2OLklbxMe0SS/\n" +
            "YBj3xwB0TyGvEt6HBEs3EVUYn/9b/7oRsXnlDSrPraNuY8wrztuiuYRf5TkCQQCd\n" +
            "oxVYyjESJr8sknUXY2TnLritJTNmOEqNls5fB5AUo1DuayTaHQ2MS0NpcV51eu7Y\n" +
            "L8a5CLE0hrU6ANARvq+bAkAYXxf1CpMKjJAoT5Sx0jvCcQKZlS2fmoMfJjv/qy0h\n" +
            "kmZro0KkK1TAB3QWUk3TPOe44YLk1/F13XWYeRIeg5g+\n" +
            "-----END RSA PRIVATE KEY-----";

    private String pkcs1PubKStr = "-----BEGIN RSA PUBLIC KEY-----\n" +
            "MIGJAoGBALV3zAB4cvUVpI6LsNUI4aa9McNyOlkeeq/wZtYHmDVLQsmfKY3G4siF\n" +
            "NbOzM7GICoYRPivDeyW1qLuVwAZoEHY9mljQJT4/ymmYL7y5OUAjRN08uGb5aobL\n" +
            "JS7dXDAlHjz9aEr/RuxQ7KPBmLcJB7zRNF+cb8RyB6EfgbEturPnAgMBAAE=\n" +
            "-----END RSA PUBLIC KEY-----";

    private String nStr = "B577CC007872F515A48E8BB0D508E1A6BD31C3723A591E7AAFF066D60798354B42C99F29" +
            "8DC6E2C88535B3B333B1880A86113E2BC37B25B5A8BB95C0066810763D9A58D0253E3FCA69982FBCB93940" +
            "2344DD3CB866F96A86CB252EDD5C30251E3CFD684AFF46EC50ECA3C198B70907BCD1345F9C6FC47207A11F" +
            "81B12DBAB3E7";

    private String eStr = "010001";

    private String[] algs = new String[] {
            "MD5WithRSA",
            "SHA1WithRSA",
            "SHA224WithRSA",
            "SHA256WithRSA",
            "SHA384WithRSA",
            "SHA512WithRSA",
            "SHA3-224WithRSA",
            "SHA3-256WithRSA",
            "SHA3-384WithRSA",
            "SHA3-512WithRSA",

            "MD5WithRSA/PSS",
            "SHA1WithRSA/PSS",
            "SHA224WithRSA/PSS",
            "SHA256WithRSA/PSS",
            "SHA384WithRSA/PSS",
            "SHA512WithRSA/PSS",
            "SHA3-224WithRSA/PSS",
            "SHA3-256WithRSA/PSS",
            "SHA3-384WithRSA/PSS",
            "SHA3-512WithRSA/PSS"
    };

    private String[] privCiphers = new String[] {
            "48B8346DC3A33D24B4AB38508BA27C959526A2052CE7C3B47628B8BC6CF958984077D22FA0F843A2F54653882D9CE97871B321831133DAE03024F769BBB498B7458BA03C32F8D657D52416808444151A2B55851B96C07397C8BFD977110C4C214F73C3A065A8D7CF4C74BB18F2BCEB48056B297CC5ED981AC2B266CD670A9544",
            "B342EA803011108B7EFB9B58E36FC8AF1A49C5C7D0AEBEA9DBC5F0B1232E8B1F03D1729CC1B428ABFA8513E90AACB70058210DDA7A80A02203CB457C868ACE19AAF150E227FCFD8BB0B879385ED89FFF3C91301A5475D76083CF85354141BAE18D3437E9B97661B36F98AEC04F1FFE278426330F43103167EE90F9CDC4830F7E",
            "91579405352CA7F57ADE518040BDDA6976F3C9F8D95E4CA7CE2267EE8677142FFB3073BBB721E535DB22B664C8BCC27EA2E20914D136B75906EE009193044513D0AF4F6AD24482160DA40ABC2352B81E2A0E8717E288A6EAACBC86B6C4BFE5C391B15D2462162A6B2B97AF72936F3FCB92B4675DB013A6E9DD244FB6F9E4A09D",
            "0476FE3C06EEED8105CC5A815B5E0DB6C4CF80211680C557763EB024AC08DB59408334B8DFA44C60CC7E634B7B6D343CD147F8CC3A0BAE1A787C16EC596C95FCF4EB65D090F564DBBD6BFBFE06550C568D607D092BC59E74E828286E0DE76027CA48B7A26B5A00592A9BAA1B65631B1EC9EC5AFA0F1B85FBE00CB23707008AB2",
            "3107AED78A0C08307AE10AD3351BAB298CE636C4CA9E795B6949AF03375F505C4384EAC9A7ACA7D3D0ED7AC2D621099DA2F4E5850C1D33F798503BFD8249BDC0D317D3C58FC41C3A51E1A7785932A0AFDF90FA1952E0165C4F72164BA080C83A6AA0F49A520974C39FFEA87F3820A601B90AE6EEAB0208083A521FFB12277292",
            "9547F0C4DA7BA220E652A18F8DA933A37917033C032BF20754E910E4D7D3E0502B1AFA9642BF9AE3D2B208D5801B47EB8D02A39713A7E1DED8265CDD3B8A176701E81875C510294B1890C45DD9A525ECFA05E85B32808BECC6324B887056169ABC790831A6EE9C8890F374665B17D9FB3F9A4CF05973DC3C2FA5F9C45DBBCB13",
            "3CE2619E386A87B1E891DFC3BD87401ABC8196A30D0DDB2F2036F87DE3D81C6AD8A0A24DDBABCF2F7DDCEA60E6F240B175D62AD4F67FB6E692B1312EFEAD5D18FED3559C3A4C4696D4C497DF852AD45466022EB402566628F1C2C5618F64FC5BF61B80ABD2DC665387D7AC19AA3D5053F4C75BBFAAE2BFD438321713480F27C4",
            "44DF0982D01921E12F069E874660D16E5C5662715CC3934AB703EB1EC8567898BE4BC0769C401EE7873BF134741AC3A2FBB2A150A3248299634B873E60762CDC085BCB9A274EF935214C71F02E5F230A3C985C09DB2B2F3C3FE7DB351733E698C55E35A8E9D802FC70C46F84D9867A4CD4A37D5E3C1923788E087679F380711C",
            "099F6615E396316D86AB4B877DFAD0055EEC0E2AD1ECFDB3D794F2090146DE350D0B4747F57ABC2AD7227EBB6D601FD981563160D384450609865A81DD7F23A3DD0B273CB07B5F6D78DF3DC3CABC0EB2C8537744CE75C53DA3B22AC1AC959A559FD04C5E8683CF7F8D79788865A2D3DC147FA43D0E823C65D2CE0043AC4712C1",
            "208EA77FDFA9F0391D9E234662C2A63C97DC27C74FCAB2671F82A1A14A0BEBA260EDE582F0DEA49370DC498E52DADA5B6FE1143185C24E253EEE57D2049A748579B3B17532B491FB7CC9BF725DBF8E1C3C11E8E71A3D28E4D6DC55A849D2C48F6C90015250F9DE32ACA647B1C493C44D453820A0656EC28F52ADF854D766EF7F",

            "5668FC4D19785AEB2EC150A7C373B3E76DE009B8941ED80EABA551BFF5DFFCBC3A06DB25C7EB0DD375476D2D4531BA07F5176AAC2FFCD5D7DFEED813E4D12456E339FC33FD30A44576D3058546F57B385E57FBE4FD507F5C7A3294FABEE0A2D66048F68C374D9DB92FC8B8C9787DFFD023B60301FD9BC9EBEC897230AC6B8397",
            "951EC606810D648B73A062113B3E056CDC07D8B9EC38183ED1100D1C08AE694767B7A2F2D9DCCBFDFC288CD78CB3594713D2896A91AA9028A29CEC36A610B81E85503AC22352EF7AE216B783236538F712E5D619F1A211B6AAF0C118613376A7E17F22E179ADB0BF73C04ED9E195295CBFAF98B1F8911EEFF62DD0B68B7B1314",
            "B3615E258BED5172E0638B8C92479AAB7995BAFFE6FA02DFCA0ED8A3AA97B371650519D2822EA0720FAD2F18D2F66B88C45EDC5C452159DCC201DCF8762458B9A88CDBCD2D4823FFFAD5BC8F10B6146B564FCF6411FD43FC9B782474161192531F71D0D8F15FCC4FEB70389203CE25B9D11010FFC15647A41EFEC57B3B58B644",
            "10A98C7EF898C4F5D4B6F326532C602F035AAF5DACE3D047DEB9BB4A091079AF4BD139BE79A8A03F959E4A9E2EFAD733E80846D5BF769E4C1BDD74D2C5DB2912110C1864FCE097E72C067A03316487429E98919A89AC838C1A2C115BF6843F9DBE48C70C8CB16C659C1A2ADCDFD3C339A68B9D8A58ABAACBA9797DC545FD3386",
            "7F170C45C38FFA09A7CD4E57BEFD02861C3B4FA25B7A7B03877A2263AFDCE57AF3C5851BE8B323D445A5AFAEA170F153E8E0284B60D388373AA76111E79A074B69A97FC1295ACAFF5A5760C449D8F96AE8A472012E64C702D773DF25D9702EC0426AE849A698CCC97B191F41B89C6DC40F99E7141BD1A2E8512D6C61693EE443",
            "",
            "8961D07F79D9AF9B3A2D6B7C6C128D0C2086762282B1BB1B89978DEAC5B6A368C6F1F0383BAA7BDD188D43D3BB0A427A3715E9D8C78251D536F7EAF4E36231A0FC752369B21AD675F616D39F681BAF2FC9EFCAF91E6F84C9D3A49425816C2CB9EEEC7437BE4BE6625FE972916C18CA539285FC612107A27F7BB26AC703C35E96",
            "5D35B6A3889D0B00633CCCA7230F849202CB159EAE68DE46713D91A76828DB5E34ABA5ECCF2DD4F27925942841264D8B0732BB77D1FDCBCCBCF3AAD430F91499594C6429FCC7DDD2505F9D83714E82F473B650FB22D7555152A09A0EEEA7DF9BE798B7F9FFC6EE61060D4FB010303CD2A6AED34262EAEFEAD6339B59DDBFB063",
            "90D230D682D72644C1F3D2178E17B4AAF2490B23C7CE7072A98DEAFCAFCB9255C6E0CF36942F03A346A97D9EA09D00FF6E20D627D3B3239F0F10F8E042B493AF57DC406920B77D3889BD7D86DE53805AEC1CBB683D9587569FEDB19BC4D1A348B75BB5E889201C6E98C1769E283B5CCD1E25FDB320CAE10E047AAD3325D5A80E",
    };

    @Test
    public void testPrivateSign() {
        try {
            byte[] plainBytes = YiSMCore.fromHexString(nStr + eStr);

            YiCryptoKey privateKey = new YiCryptoKey();
            privateKey.initRSAKeyFromPEM(pkcs1PrivKStr);

            YiCryptoKey publicKey = new YiCryptoKey();
            publicKey.initRSAKeyFromPEM(pkcs1PubKStr);


            for(int i = 0; i < algs.length; i++) {
                if(algs[i].equals("SHA512WithRSA/PSS") ||
                        algs[i].equals("SHA3-512WithRSA/PSS")) {
                    try {
                        YiSMCore.getInstance(algs[i])
                                .initForSigner(true, privateKey);
                        Assert.fail("must throw illegal key.");
                    }catch (YiCryptoException ex) {
                        // 1024 key is too small.
                        continue;
                    }
                }

                byte[] cipherBytes = YiSMCore.getInstance(algs[i])
                        .initForSigner(true, privateKey)
                        .update(plainBytes, 0, 13)
                        .update(plainBytes, 13, plainBytes.length - 13)
                        .generateSignature();

                Log.d("YiLog", algs[i] + " sign data: " + YiSMCore.toHexString(cipherBytes));

                boolean verifyResult = YiSMCore.getInstance(algs[i])
                        .initForSigner(false, publicKey)
                        .update(plainBytes, 0, 13)
                        .update(plainBytes, 13, plainBytes.length - 13)
                        .verifySignature(cipherBytes);

                Assert.assertTrue(verifyResult);

                verifyResult = YiSMCore.getInstance(algs[i])
                        .initForSigner(false, publicKey)
                        .update(plainBytes, 0, 13)
                        .update(plainBytes, 13, plainBytes.length - 13)
                        .verifySignature(YiSMCore.fromHexString(privCiphers[i]));

                Assert.assertTrue(verifyResult);
            }
        }catch (Exception ex) {
            Assert.fail(ex.getMessage());
        }
    }
}
